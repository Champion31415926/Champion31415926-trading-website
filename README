Online Product Trading Website

Overview
This project is an online trading platform that enables users to buy and sell products securely and conveniently. It manages product catalogues, user profiles, orders and supports community interactions (comments, likes, favourites). The system also includes an AI-based price trend analysis module that predicts short-term direction of prices for certain product categories and gives buy/wait recommendations.

Research Objectives

1. To design and develop a full-featured website for online product trading.
2. To implement interactive features including comments, likes, and favourites to boost engagement.
3. To build an operation logging system that tracks and analyses user activities for monitoring and improvement.

Key Features
Core

* User registration, authentication (JWT), and profile management.
* Product listing, detailed product pages, create/edit product flows.
* Order creation, payment tracking, refund handling, and status transitions (1: Pending payment; 2: Paid; 3: Cancelled).

Interaction

* Comment and rating system for products.
* Like and favourite (bookmark) functionality.
* Message/notification for sellers (e.g., when someone likes a product).

AI-powered Price Advice

* Module ingests historical price series for a chosen category or product (from site data and optionally external sources).
* Uses machine learning models to estimate short-term trends (rise / fall) and confidence.
* Outputs human-readable advice:

  * "BUY NOW" if predicted upward movement with sufficient confidence.
  * "WAIT" if predicted downward movement or model uncertainty.
  * Each advice includes a confidence score and a brief rationale (e.g., "recent upward trend + low supply").
* Feedback loop: user actions (buys/sells) and later realized prices feed back to retrain the model and improve accuracy.

Operation Logging & Monitoring

* Logs critical user actions: login, product publish/edit, order events, comments, likes, admin actions.
* Admin dashboard to view operation logs, filter by user/action/time and export reports.
* Enables security audit and behavioural analytics.

Technology Stack
Backend

* Java + Spring Boot 3
* MyBatis for SQL mapping
* PostgreSQL as primary database
* JWT for authentication
* Redis for caching (optional)

Frontend

* Vue 3 (Vite)
* Axios for API calls
* UI: Element Plus or Tailwind components

AI Service

* Python (Flask/FastAPI) microservice or separate pipeline
* TensorFlow / Keras or scikit-learn for model training and inference
* Data ETL to prepare historical pricing features

DevOps & Tools

* Docker (containerized services)
* Swagger for API docs
* GitHub for source control

Project Structure (high level)

* backend/

  * src/main/java/... (controllers, services, mappers, models, config, aspects)
  * resources/mapper/*.xml (MyBatis)
* frontend/

  * src/ (views, components, router, store, utils)
* ai/

  * model_training/ (training scripts)
  * inference_service/ (REST API for predictions)
* infra/

  * docker-compose.yml
  * deployment scripts

Installation (development)

1. Start PostgreSQL and create the project database.
2. Configure application properties (DB URL, credentials, JWT secret).
3. Build and run backend:

   * mvn clean package
   * java -jar target/your-app.jar
4. Start frontend dev server:

   * cd frontend
   * npm install
   * npm run dev
5. (Optional) Start AI inference service for price predictions.

Usage

* Register and login as normal user.
* Add products, browse listings, like / favourite / comment.
* Place an order and follow status updates.
* On product pages or category pages, view AI price advice block showing predicted trend and recommendation.

Data and Model Notes

* AI model requires sufficient historical price data. Start with offline batch training and expose inference via a REST endpoint.
* Use features such as moving averages, price returns, seasonality, listing counts, and external signals if available.
* Present model confidence and avoid overclaiming accuracy â€” show probability and explainability where possible.

Security & Privacy

* Protect user data, hash passwords with BCrypt, validate inputs, and use HTTPS in production.
* Log only necessary personal data and comply with applicable privacy regulations.

Contributing

* Fork repo, create feature branch, open pull request.
* Follow coding conventions and include unit tests for new backend features.
* Update documentation and AI training notes when changing model inputs.

Contact
Project Lead: Chen Pinyan

License
Specify your preferred license (e.g., MIT, Apache-2.0) and add LICENSE file.
